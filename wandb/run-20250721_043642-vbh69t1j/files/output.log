Train set shape: torch.Size([16000, 1, 80, 80])
Validation set shape: torch.Size([2000, 1, 80, 80])
Test set shape: torch.Size([2000, 1, 80, 80])
Epochs:   0%|                                                                                                                                            | 0/201 [00:01<?, ?it/s]
Traceback (most recent call last):
  File "/home/johnma/d-flow/train.py", line 113, in <module>
    scaler.scale(loss).backward()
  File "/home/johnma/d-flow/venv/lib64/python3.9/site-packages/torch/_tensor.py", line 648, in backward
    torch.autograd.backward(
  File "/home/johnma/d-flow/venv/lib64/python3.9/site-packages/torch/autograd/__init__.py", line 353, in backward
    _engine_run_backward(
  File "/home/johnma/d-flow/venv/lib64/python3.9/site-packages/torch/autograd/graph.py", line 824, in _engine_run_backward
    return Variable._execution_engine.run_backward(  # Calls into the C++ engine to run the backward pass
torch.OutOfMemoryError: CUDA out of memory. Tried to allocate 4.88 GiB. GPU 0 has a total capacity of 47.37 GiB of which 929.69 MiB is free. Including non-PyTorch memory, this process has 46.46 GiB memory in use. Of the allocated memory 40.81 GiB is allocated by PyTorch, and 5.13 GiB is reserved by PyTorch but unallocated. If reserved but unallocated memory is large try setting PYTORCH_CUDA_ALLOC_CONF=expandable_segments:True to avoid fragmentation.  See documentation for Memory Management  (https://pytorch.org/docs/stable/notes/cuda.html#environment-variables)
